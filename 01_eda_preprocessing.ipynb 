{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"-bi_Jvcx9KWx","executionInfo":{"status":"ok","timestamp":1749101697193,"user_tz":-120,"elapsed":5731,"user":{"displayName":"Nicolás Gaveglio","userId":"06424383478873501890"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.preprocessing import LabelEncoder,OrdinalEncoder,MinMaxScaler"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"LZoVO2xX9aXZ","executionInfo":{"status":"ok","timestamp":1749101742838,"user_tz":-120,"elapsed":44,"user":{"displayName":"Nicolás Gaveglio","userId":"06424383478873501890"}}},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["# conexion a drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YYLCdPCelUG-","executionInfo":{"status":"ok","timestamp":1749101763327,"user_tz":-120,"elapsed":18717,"user":{"displayName":"Nicolás Gaveglio","userId":"06424383478873501890"}},"outputId":"b83740ac-de18-47cf-dad9-54067a1bd8c7"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["df=pd.read_csv(\"/content/drive/MyDrive/Grupo_TFM/DataFrame/data_dsmarket/df_sales_calendar_price.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":316},"id":"FzuUd0fllUs_","executionInfo":{"status":"error","timestamp":1749101777753,"user_tz":-120,"elapsed":4399,"user":{"displayName":"Nicolás Gaveglio","userId":"06424383478873501890"}},"outputId":"b3720d73-e864-407b-d2b9-0a4864084769"},"execution_count":4,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/content/drive/MyDrive/Grupo_TFM/DataFrame/data_dsmarket/df_sales_calendar_price.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-874942625014>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/drive/MyDrive/Grupo_TFM/DataFrame/data_dsmarket/df_sales_calendar_price.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/Grupo_TFM/DataFrame/data_dsmarket/df_sales_calendar_price.csv'"]}]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1749101815301,"user":{"displayName":"Nicolás Gaveglio","userId":"06424383478873501890"},"user_tz":-120},"id":"QjgU71ND9iaB"},"outputs":[],"source":["# df=pd.read_csv('df_sales_calendar_price.csv')"]},{"cell_type":"markdown","metadata":{"id":"fN21qIVV-kq4"},"source":["# PowerBI data preparation"]},{"cell_type":"markdown","metadata":{"id":"p2eA0gc89qbZ"},"source":["## Null value analysis - price"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1O1KFq5IAaW8"},"outputs":[],"source":["df.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A8I0vraJXvvy"},"outputs":[],"source":["df.head(10)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lbS7PsYJXvvz"},"outputs":[],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-UNRN51sXvv1"},"outputs":[],"source":["df.nunique()"]},{"cell_type":"markdown","metadata":{"id":"jQAad79cXvv2"},"source":["The prices we have in this DF are those that come from the raw \"item_prices\" table. This means that \"price for the product \"item\" in the period yearweek\" are calculated as an average across 7 days. If not available, there were no sales for the product that week.\n","\n","We have understood that the price comes divided by 7, as a price value per day, which is not very useful. We will analyze the outliers based on the \"sell_price\" and subsequently perform the calculation of unit price and revenue"]},{"cell_type":"markdown","metadata":{"id":"mM--1rU4AaW-"},"source":["# Data validation analysis"]},{"cell_type":"markdown","metadata":{"id":"bvJdfjpwAaW_"},"source":["We check sales that lack an associated price\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y9Ta3HaFAaW_"},"outputs":[],"source":["filtered_rows = df[(df['sales'] > 0) ]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2aozy08JAaW_"},"outputs":[],"source":["filtered_rows=filtered_rows['sell_price'].isna()\n"]},{"cell_type":"markdown","source":["No rows exist with sales but without price.\n"],"metadata":{"id":"54W0cqHLmiRn"}},{"cell_type":"code","execution_count":6,"metadata":{"id":"MeL74Q0vAaW_","colab":{"base_uri":"https://localhost:8080/","height":156},"executionInfo":{"status":"error","timestamp":1749102046929,"user_tz":-120,"elapsed":50,"user":{"displayName":"Nicolás Gaveglio","userId":"06424383478873501890"}},"outputId":"0f6f8a6e-4127-47d9-9b1c-4dcd0d92dad6"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'df' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-f9d0dff0189b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Crosscheck\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sell_price'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}],"source":["#Crosscheck\n","df[df['sell_price'] <= 0]"]},{"cell_type":"markdown","metadata":{"id":"Bq1id5fI-dgr"},"source":["\n","# Outlier analysis"]},{"cell_type":"markdown","metadata":{"id":"jt80dhtuZlBn"},"source":["To be able to visualize the outliers of all products by store we will do it:\n","\n","* Calculating the standard deviation won't be completely accurate\n","since we don't know well what distribution each product has, but it will give us an indicator of where to look.\n","* Graphically it's not possible due to the high number of products.\n","* We use Z-score model to determine outliers.\n","Once detected, the outlier value will be imputed with the mode of the item in the store and yearweek where it's located."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wOJKmTuJAaXA"},"outputs":[],"source":["#boxplot\n","plt.figure(figsize=(14, 8))\n","sns.boxplot(x='category', y='sell_price', data=df)\n","plt.title('Price_data_distribution')\n","plt.xlabel('Item')\n","plt.ylabel('Sell Price')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QJZKVGf_AaXA"},"outputs":[],"source":["#scatterplot (years)\n","g = sns.FacetGrid(df, col=\"category\", col_wrap=3, height=6, sharex=True, sharey=True)\n","g.map(sns.scatterplot, \"year\", \"sell_price\")\n","\n","# Add a title and adjust layout\n","g.fig.suptitle('Price Data Distribution by Category', y=1.02)\n","g.set_axis_labels('Year', 'Sell Price')\n","g.set_titles('Category: {col_name}')\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"QXpYCzp_AaXA"},"source":["Outlier detection logic:\n","\n","* Z-score flags values of +- 3 as outliers. We first computed this\n","by item and store, identifying outliers within individual stores. Outlier = True\n","* As these could be store-specific outliers but not outliers for the product overall, we recalculate using z-score_gen Outlier True\n","* With these metrics, we check if the product exceeds +-3 in both store and general z-scores, and occurs during non-promotional periods (no_event). Products meeting all three criteria are marked True in the outlier column, others False."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qGnD3kAUAaXA"},"outputs":[],"source":["df_weeks = df.groupby(['item', 'store_code', 'yearweek'], as_index=False).agg({\n","    'sales': 'sum',\n","    **{col: 'first' for col in df.columns if col not in ['item', 'store_code', 'yearweek', 'sales']}\n","})"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2eAg7r6YAaXB"},"outputs":[],"source":["df_weeks.head(10)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UWz3rg4mAaXB"},"outputs":[],"source":["df_weeks.drop(columns=['month'], inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0muXm_EgAaXB"},"outputs":[],"source":["df_weeks['std_item_store'] = df_weeks.groupby(['item', 'store_code'])['sell_price'].transform('std')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"witlW_2dAaXB"},"outputs":[],"source":["df_weeks['mean_item_store'] = df_weeks.groupby(['item', 'store_code'])['sell_price'].transform('mean')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4iu9ZCUeAaXB"},"outputs":[],"source":["std_item_store = np.where(df_weeks['std_item_store'] == 0, np.nan, df_weeks['std_item_store'])\n","df_weeks['z_score'] = (df_weeks['sell_price'] - df_weeks['mean_item_store']) / std_item_store\n","df_weeks['z_score'] = df_weeks['z_score'].fillna(0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AxrQXpDbAaXB"},"outputs":[],"source":["df_weeks[(df_weeks['z_score'] <= -3) | (df_weeks['z_score'] >= 3)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FMf0tMkkAaXC"},"outputs":[],"source":["# We perform general calculations for the entire dataset\n","df_weeks['std_item_gen'] = df_weeks.groupby(['item'])['sell_price'].transform('std')\n","df_weeks['mean_item_gen'] = df_weeks.groupby(['item'])['sell_price'].transform('mean')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D0po06_RAaXC"},"outputs":[],"source":["\n","df_weeks['z_score_gen'] = df_weeks.apply(\n","    lambda row: 0 if row['std_item_gen'] == 0\n","    else (row['sell_price'] - row['mean_item_gen']) / row['std_item_gen'],\n","    axis=1\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IcoPA2x5AaXC"},"outputs":[],"source":["# Calculate the mode which will be the replacement for outliers\n","df_weeks['mode_item'] = df_weeks.groupby(['item','store_code','year'])['sell_price'].transform(\n","    lambda x: x.mode()[0] if not x.mode().empty else np.nan)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vn1kyL6WAaXC"},"outputs":[],"source":["df_weeks[(df_weeks['item']=='ACCESORIES_1_001')& (df_weeks['store_code']=='BOS_1')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"agWhcaAPAaXC"},"outputs":[],"source":["# Create the outlier column in the dataset as false\n","df_weeks['outlier'] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hBoWQd2eAaXC"},"outputs":[],"source":["df_weeks['outlier_store_and_gen'] = (abs(df_weeks['z_score']) > 3) & (abs(df_weeks['z_score_gen']) > 3)\n","\n","df_weeks['no_event'] = df_weeks['event'] == 'no_event'\n","\n","df_weeks['outlier'] = df_weeks['outlier_store_and_gen'] & df_weeks['no_event']\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B5V36TJCAaXD"},"outputs":[],"source":["# Check what percentage outliers represent in the dataset\n","df_weeks['outlier'].value_counts()/len(df_weeks)*100"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1e2ziLXrAaXD"},"outputs":[],"source":["# Check which values it affects:\n","df_weeks[df_weeks['outlier'] == True]['item'].unique()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1bGTemLAAaXD"},"outputs":[],"source":["df_weeks.loc[df_weeks['outlier'] == True, 'sell_price'] = df_weeks.loc[df_weeks['outlier'] == True, 'mode_item']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bs4iCuqPAaXD"},"outputs":[],"source":["df_weeks[(df_weeks['item']=='ACCESORIES_1_001')& (df_weeks['store_code']=='BOS_1')&(df_weeks['outlier']==True)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vdRW3kGGAaXD"},"outputs":[],"source":["# Remove columns we don't need\n","df_weeks.drop(columns=['std_item_store', 'mean_item_store', 'z_score', 'std_item_gen', 'mean_item_gen', 'z_score_gen', 'outlier','outlier_store_and_gen', 'no_event'], inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_RhPtX5rAaXH"},"outputs":[],"source":["df_weeks.drop(columns=['mode_item'], inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"ryFifM2EAaXI"},"source":["## Unit price and revenue computation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4bB6h-oWXvv4"},"outputs":[],"source":["# Create the price_test column by performing the required calculation -\n","#df['price_unit'] = df['sell_price'] * 7"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I0DCi3W1AaXI"},"outputs":[],"source":["#create revenue column\n","df_weeks['Revenue'] = df_weeks['sell_price'] * df_weeks['sales']"]},{"cell_type":"markdown","metadata":{"id":"xVI_vuk0-oe6"},"source":["# CSV para powerBI"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5xvjSUt9AaXI"},"outputs":[],"source":["df_weeks.to_csv('df_weeks.csv', index=False)\n","df_weeks.head(10)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F3Ms7ilqAaXJ"},"outputs":[],"source":["df_weeks[df_weeks['sales']>0]"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.9"}},"nbformat":4,"nbformat_minor":0}